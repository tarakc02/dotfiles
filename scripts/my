#! /usr/bin/env bash

# -----------------------------------------------------------------------------
# setup library functions and PATH
# -----------------------------------------------------------------------------

# search for '####' in libsnap.sh to see coding-conventions and environment
source libsnap.sh || exit 1
# We use these constants from libsnap.sh (and change $our_name)
readonly tmp_dir our_path true false is_darwin max_call_stack_args
# We used these functions from libsnap.sh .
readonly -f print-or-egrep-Usage-then-exit

prepend-to-PATH-var PATH /usr/local/bin
prepend-to-PATH-var PATH /usr/local/sbin

# -----------------------------------------------------------------------------
# define Usage, parse options
# -----------------------------------------------------------------------------

Usage="
Usage: $our_name action [args]
  Current actions are:
      root: show project root (git repositories)
      ggrep: git grep entire project repo (ignoring gitignored stuff)
      rgrep: recursive grep, with pretty highlighting
      task: create new task with src, input, output dirs
      week: open current weekly (in a new tmux window if in tmux)
      preview-rmd: open a preview output of an Rmd file
      preview-md: preview the output of a markdown file (default HTML, -p for pdf)
      show: show an email
      reply: compose reply to an email
      sample: sample a random file from a collection defined by location and pattern
      symlink-audit: audit a directory tree for broken symlinks
      pg-services: list defined postgres services
      collection-summary: summarize a document collection

  NOTE: to see what an action would do, use -d option to simulate the action.
  NOTE: this was copied from aer-tools, see it for more sample code

  Common options:
	-d: Debug shell script (don't run commands, just show them): simulation
	-t: Trace shell script (show commands as they execute)
	-T level: control whether Trace & TraceV functions run echoE & echoEV
	-k keyword: show actions whose Usage message contains keyword
"

IfRun= Trace=    debug_opt= trace_opt=
declare -i Trace_level=0		# default to none (probably)
our_opts=
while getopts "dtT: hk"  arg
    do	our_opts+=" -$arg ${OPTARG-}"
	case $arg in
	   ( d ) IfRun="echo"	 debug_opt=-d ;; # put $IfRun b4 'active' cmds
	   ( t ) Trace="set -x"  trace_opt=-t ;;
	   ( T ) Trace_level=$OPTARG Trace_level_opt="-T $OPTARG" ;;

	   (h|k) print-or-egrep-Usage-then-exit "$@" ;;
	   ( * ) echo "$Usage" >&2; exit 1 ;;
	esac
done
let OPTIND=$OPTIND-1
shift $OPTIND
unset arg

[[ $Trace && $IfRun ]] && IfRun=:

trap 'set +x; rm -f $tmp_1 $tmp_2 $tmp_3 $tmp_4 $tmp_5; trap EXIT' EXIT

readonly tmp_1=$tmp_dir/$our_name-1-$$	; tmp=$tmp_1
readonly tmp_2=$tmp_dir/$our_name-2-$$
readonly tmp_3=$tmp_dir/$our_name-3-$$
readonly tmp_4=$tmp_dir/$our_name-4-$$
readonly tmp_5=$tmp_dir/$our_name-5-$$

FUNCNEST=100				# abort on infinite recursion

# $Trace

# -----------------------------------------------------------------------------
# functions
# -----------------------------------------------------------------------------

sum-args-prodedural() {

	local -i arg sum=0    # -i means integer, so arithmetic is implied
	for arg
	    do	sum+=arg
	done
	echo "$FUNCNAME = $sum"
}

# ----

sum-args-functional() {
	local args=$*

    TraceV 1 args    # only see this when using -T1
    [[ $args =~ ^[0-9\ ]+$ ]] || abort "args must be integers"
    [[ $args != *[!0-9\ ]* ]] || abort "args must be integers"
	local -i sum=${args// /+}
	echo "$FUNCNAME = $sum"
}

project-root() {
    git rev-parse --show-toplevel || abort "only works within git repositories"
}

ggrep() {
    git grep --break -n -p -C2 --full-name "$@" -- :/ \
        || abort "use --no-index outside of git repos"
}

rgrep() {
    git grep --break -n -p -C2 --full-name --no-index "$@"
}

rdoc() {
    Rscript --vanilla -e \
        "tools:::Rd2txt(utils:::.getHelpFile(help(commandArgs(T)[2])))" \
        --args "$@" | sed "s/'_'//g"
}


new-task() {
    local args=$*
    [[ ! -d $1 ]] || abort "directory $1 already exists"
    mkdir -p $1/input $1/src $1/output
}

open-weekly() {
    local fname=`date -d 'next monday' +%Y%m%d`
    local fname="$HOME/git/weeklies/$fname.md"
    [ -f "$fname" ] || cp "$HOME/git/weeklies/.template.md" "$fname"
    local COLUMNS=`tmux display -p '#{pane_width}'`

    if [ -z "${TMUX-}" ]; then
        nvim '+Goyo' '+cd $HOME/git/weeklies' "$fname"
    elif [ "$COLUMNS" -gt 165 ]; then
        tmux split-window -l 50% -h \
            nvim '+Goyo' '+cd $HOME/git/weeklies' "$fname"
    else
        tmux split-window -l 50% -v \
            nvim '+Goyo' '+cd $HOME/git/weeklies' "$fname"
    fi
}

preview-rmd() {
    local dir=$(mktemp -d)
    local rmdfile="$dir/preview.rmd"
    if read -t 0; then
        cat > $rmdfile
    else
        cp "$1" $rmdfile
    fi
    Rscript -e "rmarkdown::render('$rmdfile', quiet = TRUE)" > "$dir/preview.log"
    if [[ -f "$dir/preview.html" ]]; then
        open "$dir/preview.html"
    elif [[ -f "$dir/preview.pdf" ]]; then
        open "$dir/preview.pdf"
    elif [[ -f "$dir/preview.md" ]]; then
        nvim "$dir/preview.md"
    else
        abort "didn't create pdf, html, or markdown output"
    fi
    cat "$dir/preview.rmd"
}

preview-md() {
    local dir=$(mktemp -d)
    local mdfile="$dir/preview.md"
    if read -t 0; then
        cat > $mdfile
    else
        cp "$1" $mdfile
    fi
    pandoc $mdfile -f markdown -t html --quiet \
        -o "$dir/preview.html" > "$dir/preview.log"
    if [[ -f "$dir/preview.html" ]]; then
        open "$dir/preview.html"
    elif [[ -f "$dir/preview.pdf" ]]; then
        open "$dir/preview.pdf"
    else
        abort "didn't create pdf or html output"
    fi
    cat "$dir/preview.md"
}

preview-mail() {
    local dir=$(mktemp -d)
    local mailfile="$dir/preview.mail"
    if read -t 0; then
        cat > $mailfile
    else
        cp "$1" $mailfile
    fi

    cat $mailfile | mailpreview > "$dir/preview.html"
    open "$dir/preview.html"
    cat "$dir/preview.mail"
}

show() {
    notmuch show "$*" | nvim '+set filetype=mail'
}

reply() {
    notmuch reply "$*" | nvim '+set filetype=mail' '+Goyo'
}

sample() {
    find "$1" -type f -iname "$2" | shuf | head -1
}

symlink-audit() {
    local links=$(find "$1" -type l)
    local targets=$( echo "$links" | xargs readlink -fm )
    local missing=$(echo "$targets" | while read fname; do test -f ${fname}; echo $?; done)

    paste -d'|' <(echo "$links") <(echo "$targets") <(echo "$missing")
}

lookup() {
    local fname="/usr/share/dict/words"
    [ -f "$fname" ] || abort "only works on FreeBSD machines"
    grep "$1" "$fname"
}

pg-services() {
    grep -E '\[.+\]' ~/.pg_service.conf 
}

collection-summary() {
    summarize-collection $1
}

# I used this to find every time I used `pdf_text`
#find . -type f -iname "*.R" -exec grep -r -n -H -C2 --color=always "pdf_text" {} +;

# ----------------------------------------------------------------------------
# end of functions and global variables
# ----------------------------------------------------------------------------

#############################################################################
# put actions after here
#############################################################################

[[ $# != 0 ]] || abort "specify an action to perform\n$Usage"

set -u			    # abort if access unset (e.g. misspelled) variable

action=$1; shift
_our_name="$our_name"
 our_name="$our_name $action"
undo-action-abbrev() { readonly action=$1 our_name="$_our_name $1" _our_name; }

#$Trace

case $action in
    # root: show project root if in git repository
    ( root )
        project-root
        ;;
    # grep: git grep in project files, use `-- :/` to search from top level
    ( ggrep )
        ggrep "$@"
        ;;
    ( rgrep )
        rgrep "$@"
        ;;
    # task: create new task with src, input, output dirs
    ( task )
        new-task "$@"
        ;;
    ( week )
        open-weekly "$@"
        ;;
    ( preview-rmd )
        preview-rmd "$@"
        ;;
    ( preview-md )
        preview-md "$@"
        ;;
    ( preview-mail )
        preview-mail "$@"
        ;;
    ( show )
        show "$@"
        ;;
    ( reply )
        reply "$@"
        ;;
    ( rdoc )
        rdoc "$@"
        ;;
    ( sample )
        sample "$@"
        ;;
    ( symlink-audit )
        symlink-audit "$@"
        ;;
    ( lookup )
        lookup "$@"
        ;;
    ( pg-services )
        pg-services
        ;;
    ( collection-summary )
        collection-summary "$@"
        ;;
    ( * )
        abort "'$action' is not a recognized action, run: $_our_name -h"
        ;;

esac
