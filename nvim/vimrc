"{{{ basic options
set nocompatible
set hidden

" load project-specific vimrc, see :h exrc or https://andrew.stwrt.ca/posts/project-specific-vimrc/
set exrc

set cursorline
set termguicolors
syntax enable
set signcolumn=number
"set clipboard=unnamed

let maplocalleader = ','
nnoremap <LocalLeader><LocalLeader> ,
nnoremap <LocalLeader>v :set cursorline!<CR>
set guicursor=n-v-c:block-Cursor/lCursor-blinkon0,i-ci:ver25-Cursor/lCursor,r-cr:hor20-Cursor/lCursor

" tabs
set tabstop=4 softtabstop=0 expandtab shiftwidth=4 smarttab
set smartindent

"folding
set fdm=marker fmr={{{,}}} fdl=0 foldcolumn=4

" cursor shape
let &t_SI.="\e[5 q"
let &t_SR.="\e[4 q"
let &t_EI.="\e[1 q"

"}}}

"{{{ plugins
"set pyxversion=3
"let $VIRTUAL_ENV = '/usr/local/Caskroom/miniconda/base/envs/pynvim'
"let g:python3_host_prog='/usr/local/Caskroom/miniconda/base/envs/pynvim/bin/python'
"let g:python_host_prog='/usr/local/Caskroom/miniconda/base/envs/pynvim2/bin/python'

call plug#begin('~/.local/share/nvim/plugged')

Plug 'tpope/vim-surround'
Plug 'tpope/vim-repeat'
Plug 'godlygeek/tabular'
Plug 'tpope/vim-fugitive'

Plug 'sirver/ultisnips'
Plug 'honza/vim-snippets'

Plug 'morhetz/gruvbox'
Plug 'vim-airline/vim-airline'
Plug 'Yavor-Ivanov/airline-monokai-subtle.vim'
Plug 'sainnhe/everforest'

Plug 'junegunn/fzf', { 'dir': '~/git/fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'

Plug 'neoclide/coc.nvim', {'branch': 'release'}
Plug 'github/copilot.vim'

Plug 'jalvesaq/vimcmdline'
Plug 'jalvesaq/Nvim-R'
""Plug 'JuliaEditorSupport/julia-vim'
Plug 'tpope/vim-dadbod'
Plug 'kristijanhusak/vim-dadbod-ui'

Plug 'junegunn/goyo.vim'

call plug#end()
"}}}

"layout{{{
set relativenumber number
set colorcolumn=80
set list
set listchars=tab:▸\ ,eol:¬,nbsp:·,trail:·
"}}}

"focus{{{
function! s:DimInactiveWindow()
    setlocal nocursorline
    ""setlocal nolist
endfunction

function! s:UndimActiveWindow()
    setlocal cursorline
    ""setlocal list
endfunction

" this would change vim colorscheme to monochrome when focus is lost,
" inactivated for now because it was causing some issues with Goyo
"function! s:DimInactiveTmuxPane()
"    colorscheme monochrome
"    setlocal nocursorline
"    setlocal nolist
"    AirlineTheme monokai_subtle
"    AirlineRefresh
"endfunction

"function! s:UndimActiveTmuxPane()
"    colorscheme gruvbox
"    setlocal cursorline
"    setlocal list
"    AirlineTheme gruvbox
"    AirlineRefresh
"endfunction

autocmd WinEnter * call s:UndimActiveWindow()
autocmd WinLeave * call s:DimInactiveWindow()

"autocmd FocusGained * call s:UndimActiveTmuxPane()
"autocmd FocusLost * call s:DimInactiveTmuxPane()
"}}}

"{{{ terminal mode
autocmd TermOpen * set nobuflisted foldcolumn=0
let &shell='bash'
" use <esc> to return to normal mode in terminal
tnoremap <Esc> <C-\><C-n>
"}}}

"{{{ cmd line apps (built in terminal)
let cmdline_app           = {}
let cmdline_app['julia']   = 'julia --threads=auto --project=@. -O3'
let cmdline_app['python'] = '"bpython" || "python"'
"let cmdline_app['python'] = "python"
let cmdline_app['r']   = 'R'

let g:db_ui_execute_on_save = 0
"}}}

" {{{ completion etc
" close brackets/parens/quotes
inoremap ( ()<C-G>U<Left>
inoremap [ []<C-G>U<Left>
inoremap { {}<C-G>U<Left>
inoremap " ""<C-G>U<Left>
"inoremap ' ''<C-G>U<Left>
inoremap <expr>) getline('.')[col('.')-1] == ")" ? "\<C-G>U<Right>" : ")"
inoremap <expr>] getline('.')[col('.')-1] == "]" ? "\<C-G>U<Right>" : "]"
inoremap <expr>} getline('.')[col('.')-1] == "}" ? "\<C-G>U<Right>" : "}"
"inoremap <expr>' strpart(getline('.'), col('.')-1, 1) == "\'" ? "\<Right>" : "\'\'\<Left>"
inoremap <expr>" strpart(getline('.'), col('.')-1, 1) == "\"" ? "\<Right>" : "\"\"\<Left>"

let known_pairs = { "{}": "", "[]": "", "()": "", "\"\"": "", "''": "" }
inoremap <expr><BS> has_key(known_pairs, getline('.')[col('.')-2:col('.')-1]) ? "\<C-G>U<Right><BS><BS>" : "\<BS>"

"autocmd BufEnter * call ncm2#enable_for_buffer()
set completeopt=noinsert,menuone,noselect

"inoremap <silent> <expr> <CR> ncm2_ultisnips#expand_or("\<CR>", 'n')

"let g:ncm2_jedi#python_version = 3
"let g:ncm2_jedi#environment_path = '/Users/tshah/anaconda3/envs/pynvim'

" c-j c-k for moving in snippet
let g:UltiSnipsExpandTrigger	    = "<C-s>"
let g:UltiSnipsJumpForwardTrigger	= "<c-j>"
let g:UltiSnipsJumpBackwardTrigger	= "<c-k>"
let g:UltiSnipsSnippetDirectories   = ["UltiSnips", "my-snippets"]
let g:UltiSnipsSnippetsDir           = $HOME . "/.config/nvim/my-snippets"
"inoremap <expr> <Tab> pumvisible() ? "\<C-n>" : "\<Tab>"
"inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"

"}}}

" {{{ navigation
"search/replace
set ignorecase
set smartcase

"window navigation
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>

" navigate between open buffers
nnoremap <Tab> :bnext<CR>
nnoremap <S-Tab> :bprevious<CR>
"}}}

"{{{ appearance
"status line via airline
let g:airline_section_b = '%-0.40{getcwd()}'
let g:airline_section_c = "%f"

"show buffers
let g:airline_theme = 'everforest'
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#formatter = 'default'
let g:airline#extensions#tabline#buffer_nr_show=1

let g:monokai_term_italic = 1
let g:monokai_gui_italic = 1
let g:monochrome_italic_comments = 1
let g:gruvbox_italic = 1
let g:gruvbox_invert_tabline=1
colorscheme everforest
let g:everforest_background = 'hard'

"let g:terminal_color_0  = '#2d2e27' "black
"let g:terminal_color_1  = '#f92772' "pink
"let g:terminal_color_2  = '#a6e22d' "green
"let g:terminal_color_3  = '#e6db74' "yellow
"let g:terminal_color_4  = '#66d9ef' "light-blue/teal
"let g:terminal_color_5  = '#ae81ff' "purple
"let g:terminal_color_6  = '#0b939b' "blue
"let g:terminal_color_7  = '#8f908a' "light-grey
"let g:terminal_color_8  = '#64645e' "dark-grey
"let g:terminal_color_9  = '#e73c50' "red
"let g:terminal_color_10 = '#8ae234' "bright-green
"let g:terminal_color_11 = '#fce94f' "yellow
"let g:terminal_color_12 = '#729fcf'
"let g:terminal_color_13 = '#ad7fa8'
"let g:terminal_color_14 = '#00f5e9'
"let g:terminal_color_15 = '#eeeeec'

let rout_color_input    = 'guifg=#8f908a' "light grey
let rout_color_normal   = 'guifg=#eeeeec' "white
let rout_color_number   = 'guifg=#66d9ef' "teal
let rout_color_integer  = 'guifg=#66d9ef' "teal
let rout_color_float    = 'guifg=#66d9ef' "teal
let rout_color_complex  = 'guifg=#66d9ef' "teal
let rout_color_negnum   = 'guifg=#0b939b' "blue
let rout_color_negfloat = 'guifg=#0b939b' "blue
let rout_color_date     = 'guifg=#fce94f' "yellow
let rout_color_true     = 'guifg=#a6e22d' "green
let rout_color_false    = 'guifg=#f92772' "pink
let rout_color_inf      = 'guifg=#ffffff'
let rout_color_constant = 'guifg=#f92772' "pink
let rout_color_string   = 'guifg=#fce94f' "yellow
let rout_color_error    = 'guifg=#eeeeec guibg=#e73c50'
let rout_color_warn     = 'guifg=#e73c50'
let rout_color_index    = 'guifg=#8f908a'
"}}}

"Options related to Nvim-R{{{
vmap <Space> <Plug>RDSendSelection
nmap <Space> <Plug>RDSendLine
vmap <LocalLeader>c <Plug>RToggleComment
nmap <LocalLeader>c <Plug>RToggleComment
let R_assign = 0
let R_nvim_wd = 1
"}}}

" julia{{{
let g:default_julia_version = '1.10'
"}}}

" goyo{{{
function! s:goyo_enter()
  set eventignore=FocusGained
  let b:quitting = 0
  let b:quitting_bang = 0
  autocmd QuitPre <buffer> let b:quitting = 1
  cabbrev <buffer> q! let b:quitting_bang = 1 <bar> q!
endfunction

function! s:goyo_leave()
  " Quit Vim if this is the only remaining buffer
  set eventignore=
  if b:quitting && len(filter(range(1, bufnr('$')), 'buflisted(v:val)')) == 1
    if b:quitting_bang
      qa!
    else
      qa
    endif
  endif
endfunction

autocmd! User GoyoEnter call <SID>goyo_enter()
autocmd! User GoyoLeave call <SID>goyo_leave()

let g:goyo_linenr = 0
let g:goyo_width = 90

"}}}

" coc.nvim {{{
inoremap <silent><expr> <cr> coc#pum#visible() ? coc#_select_confirm() : 
                                           \"\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"

" Use K to show documentation in preview window.
nnoremap <silent> K :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  elseif (coc#rpc#ready())
    call CocActionAsync('doHover')
  else
    execute '!' . &keywordprg . " " . expand('<cword>')
  endif
endfunction

function! s:check_back_space() abort
    let col = col('.') - 1
    return !col || getline('.')[col - 1]  =~ '\s'
endfunction

nmap <silent> <LocalLeader>d <Plug>(coc-definition)
nmap <silent> <LocalLeader>r <Plug>(coc-references)

" Insert <tab> when previous text is space, refresh completion if not.
inoremap <silent><expr> <TAB>
            \ coc#pum#visible() ? coc#pum#next(1):
            \ <SID>check_back_space() ? "\<Tab>" :
            \ coc#refresh()
inoremap <expr><S-TAB> coc#pum#visible() ? coc#pum#prev(1) : "\<C-h>"

inoremap <silent><expr><c-l> coc#refresh()
" }}}

"use git grep
set grepprg=git\ grep\ --break\ -n\ -r\ $*\ --\ :/

" vim: set fdm=marker fmr={{{,}}} fdl=0 foldcolumn=4:
